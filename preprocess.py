# =============================================================================
# SCRIPT DE PR√âTRAITEMENT DES DONN√âES AUDIO MORSE
# =============================================================================
# Ce programme transforme les fichiers audio WAV bruts en donn√©es utilisables
# par le mod√®le d'IA. Il extrait les caract√©ristiques MFCC qui permettent
# au mod√®le de "comprendre" les signaux audio.
# =============================================================================

# IMPORTATION DES BIBLIOTH√àQUES
# ------------------------------
import os           # Pour naviguer dans les dossiers et fichiers
import json         # Pour cr√©er et lire des fichiers de configuration
import numpy as np  # Pour les calculs math√©matiques sur les tableaux
import librosa      # Biblioth√®que sp√©cialis√©e dans l'analyse audio
from tqdm import tqdm              # Pour afficher des barres de progression
from collections import Counter   # Pour compter les caract√®res

# CONFIGURATION DU PR√âTRAITEMENT
# -------------------------------
# Ces param√®tres d√©finissent comment l'audio sera analys√©
SR = 22050              # Fr√©quence d'√©chantillonnage (Hz) - r√©duite pour l'efficacit√©
HOP_LENGTH = 512        # Taille du saut entre les fen√™tres d'analyse
N_MFCC = 13            # Nombre de coefficients MFCC √† extraire
MAX_DURATION = 60.0     # Dur√©e maximale d'un fichier audio (secondes)
OUTPUT_DIR = "preprocessed_data"  # Dossier de sortie pour les donn√©es trait√©es

def extract_features(audio_path):
    """
    EXTRACTION DES CARACT√âRISTIQUES AUDIO (MFCC)
    =============================================
    Cette fonction est le c≈ìur du pr√©traitement. Elle transforme un fichier
    audio WAV en caract√©ristiques MFCC que le mod√®le d'IA peut comprendre.
    
    Les MFCC (Mel-Frequency Cepstral Coefficients) repr√©sentent les 
    caract√©ristiques spectrales importantes de l'audio, similaires √† la 
    fa√ßon dont l'oreille humaine per√ßoit le son.
    
    Arguments:
    - audio_path: Chemin vers le fichier audio √† analyser
    
    Retourne:
    - Un tableau numpy de forme (temps, 39) contenant les caract√©ristiques
    - None si une erreur survient
    """
    try:
        # CHARGEMENT DU FICHIER AUDIO
        # ---------------------------
        # librosa.load() lit le fichier et le convertit au bon format
        audio, _ = librosa.load(audio_path, sr=SR, duration=MAX_DURATION)
        
        # EXTRACTION DES MFCC DE BASE (13 COEFFICIENTS)
        # ---------------------------------------------
        # Les MFCC capturent les caract√©ristiques spectrales du signal
        mfcc = librosa.feature.mfcc(y=audio, sr=SR, n_mfcc=N_MFCC, hop_length=HOP_LENGTH)
        
        # CALCUL DES D√âRIV√âES (DELTA ET DELTA-DELTA)
        # -------------------------------------------
        # Les d√©riv√©es premi√®re et seconde ajoutent des informations
        # sur l'√©volution temporelle des caract√©ristiques
        delta = librosa.feature.delta(mfcc)          # D√©riv√©e premi√®re (vitesse de changement)
        delta2 = librosa.feature.delta(mfcc, order=2) # D√©riv√©e seconde (acc√©l√©ration)
        
        # CONCAT√âNATION DES CARACT√âRISTIQUES
        # -----------------------------------
        # On combine MFCC + Delta + Delta2 = 13 + 13 + 13 = 39 caract√©ristiques
        # .T transpose la matrice pour avoir la forme (temps, caract√©ristiques)
        return np.concatenate([mfcc, delta, delta2], axis=0).T
        
    except Exception as e:
        print(f"Erreur lors du traitement de {audio_path}: {str(e)}")
        return None

def preprocess_dataset(input_dir):
    """
    PR√âTRAITEMENT COMPLET DU DATASET
    ================================
    Cette fonction traite tous les fichiers audio d'un dossier et pr√©pare
    les donn√©es pour l'entra√Ænement du mod√®le d'IA.
    
    Processus:
    1. Parcourt tous les fichiers .wav du dossier d'entr√©e
    2. Pour chaque fichier audio, cherche le fichier .txt correspondant
    3. Extrait les caract√©ristiques MFCC de l'audio
    4. Valide que les donn√©es sont exploitables
    5. Sauvegarde tout dans un format optimis√©
    6. Cr√©e un vocabulaire de tous les caract√®res utilis√©s
    
    Arguments:
    - input_dir: Dossier contenant les fichiers audio (.wav) et texte (.txt)
    """
    
    # CR√âATION DES DOSSIERS DE SORTIE
    # --------------------------------
    os.makedirs(OUTPUT_DIR, exist_ok=True)           # Dossier principal
    mfcc_dir = os.path.join(OUTPUT_DIR, "mfccs")     # Sous-dossier pour les MFCC
    os.makedirs(mfcc_dir, exist_ok=True)

    # INITIALISATION DES STRUCTURES DE DONN√âES
    # -----------------------------------------
    metadata = []           # Liste des informations sur chaque fichier
    char_counter = Counter() # Compteur pour cr√©er le vocabulaire
    
    # Trouver tous les fichiers audio
    audio_files = [f for f in os.listdir(input_dir) if f.endswith(".wav")]

    # TRAITEMENT DE CHAQUE FICHIER AUDIO
    # ----------------------------------
    print(f"Traitement de {len(audio_files)} fichiers audio...")
    
    for audio_file in tqdm(audio_files, desc="Extraction des caract√©ristiques"):
        # RECHERCHE DU FICHIER TEXTE CORRESPONDANT
        # -----------------------------------------
        base_name = os.path.splitext(audio_file)[0]  # Nom sans extension
        text_file = os.path.join(input_dir, f"{base_name}.txt")

        # Ignorer si pas de transcription correspondante
        if not os.path.exists(text_file):
            print(f"‚ö†Ô∏è  Fichier texte manquant pour {audio_file}")
            continue

        # LECTURE DE LA TRANSCRIPTION
        # ---------------------------
        with open(text_file, 'r', encoding='utf-8') as f:
            text_label = f.read().strip().upper()  # Lecture + nettoyage

        # VALIDATION DU CONTENU TEXTUEL
        # -----------------------------
        # V√©rifier que le texte a une longueur raisonnable
        if not 3 <= len(text_label) <= 100:
            print(f"‚ö†Ô∏è  Texte trop court/long pour {audio_file}: {len(text_label)} caract√®res")
            continue

        # EXTRACTION DES CARACT√âRISTIQUES AUDIO
        # --------------------------------------
        mfcc = extract_features(os.path.join(input_dir, audio_file))
        
        # Ignorer si l'extraction a √©chou√©
        if mfcc is None:
            print(f"‚ö†Ô∏è  √âchec extraction pour {audio_file}")
            continue

        # SAUVEGARDE DES DONN√âES TRAIT√âES
        # --------------------------------
        # Sauvegarder les MFCC dans un fichier numpy (.npy)
        np.save(os.path.join(mfcc_dir, f"{base_name}.npy"), mfcc)
        
        # Compter les caract√®res pour le vocabulaire
        char_counter.update(text_label)
        
        # Ajouter aux m√©tadonn√©es
        metadata.append({
            "audio_file": audio_file,              # Nom du fichier audio original
            "mfcc_file": f"{base_name}.npy",      # Nom du fichier MFCC
            "text_label": text_label,             # Transcription textuelle
            "duration": mfcc.shape[0] * HOP_LENGTH / SR  # Dur√©e calcul√©e
        })

    # CR√âATION DU VOCABULAIRE
    # -----------------------
    # Cr√©er un dictionnaire qui associe chaque caract√®re √† un num√©ro
    # (n√©cessaire car les mod√®les d'IA ne comprennent que les nombres)
    char_to_int = {char: i+1 for i, char in enumerate(sorted(char_counter.keys()))}
    # Note: l'indice 0 sera r√©serv√© pour le padding (remplissage)

    # SAUVEGARDE DES M√âTADONN√âES ET CONFIGURATION
    # --------------------------------------------
    metadata_content = {
        "config": {
            "sample_rate": SR,          # Param√®tres utilis√©s
            "hop_length": HOP_LENGTH,
            "n_mfcc": N_MFCC
        },
        "files": metadata,              # Informations sur tous les fichiers
        "char_map": char_to_int        # Dictionnaire caract√®re -> nombre
    }
    
    # √âcriture du fichier de m√©tadonn√©es
    with open(os.path.join(OUTPUT_DIR, "metadata.json"), 'w', encoding='utf-8') as f:
        json.dump(metadata_content, f, indent=2, ensure_ascii=False)

    # R√âSUM√â DU TRAITEMENT
    # --------------------
    print(f"\n‚úÖ Pr√©traitement termin√© avec succ√®s!")
    print(f"üìä Statistiques:")
    print(f"   - Fichiers trait√©s: {len(metadata)}")
    print(f"   - Caract√®res uniques: {len(char_counter)}")
    print(f"   - Vocabulaire: {sorted(char_counter.keys())}")
    print(f"üìÅ Donn√©es sauvegard√©es dans: {OUTPUT_DIR}/")
    print(f"   - MFCC: {OUTPUT_DIR}/mfccs/")
    print(f"   - M√©tadonn√©es: {OUTPUT_DIR}/metadata.json")

# =============================================================================
# EX√âCUTION DU SCRIPT
# =============================================================================

if __name__ == "__main__":
    # Lancer le pr√©traitement sur le dossier "mon_dataset"
    # Vous pouvez changer ce nom selon votre configuration
    input_directory = "mon_dataset"
    
    # V√©rifier que le dossier existe
    if not os.path.exists(input_directory):
        print(f"‚ùå Erreur: Le dossier '{input_directory}' n'existe pas!")
        print(f"   Assurez-vous d'avoir g√©n√©r√© votre dataset avec le g√©n√©rateur Morse.")
        print(f"   Ou changez 'input_directory' dans ce script.")
    else:
        print(f"üöÄ D√©but du pr√©traitement du dossier: {input_directory}")
        preprocess_dataset(input_directory)

# =============================================================================
# INFORMATIONS IMPORTANTES POUR L'UTILISATEUR
# =============================================================================
"""
COMMENT UTILISER CE SCRIPT:
===========================

1. PR√âREQUIS:
   - Avoir un dossier contenant des paires de fichiers .wav et .txt
   - Chaque fichier audio doit avoir sa transcription correspondante
   - Exemple: morse_0001.wav + morse_0001.txt

2. INSTALLATION DES D√âPENDANCES:
   pip install librosa numpy tqdm

3. EX√âCUTION:
   python preprocess.py

4. R√âSULTATS:
   - Dossier "preprocessed_data/" cr√©√©
   - Fichiers MFCC dans "preprocessed_data/mfccs/"
   - Fichier "metadata.json" avec toutes les informations

5. PERSONNALISATION:
   - Modifier 'input_directory' pour changer le dossier source
   - Ajuster SR, N_MFCC, etc. selon vos besoins
   - MAX_DURATION limite la longueur des fichiers audio

D√âPANNAGE:
==========
- "Fichier texte manquant": V√©rifiez que chaque .wav a son .txt
- "Texte trop court/long": Ajustez les limites dans la validation
- "√âchec extraction": V√©rifiez que les fichiers audio sont valides
- Erreurs de m√©moire: R√©duisez MAX_DURATION ou N_MFCC
"""